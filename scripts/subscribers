#!/usr/bin/python
import os
import yaml
import argparse
import logging
from logging import warn, info, debug

from launchpadlib import launchpad

parser = argparse.ArgumentParser()
parser.add_argument('--subscribed', default=False, action='store_true',
        help='Show maintainers who are properly subscribed instead of unsubscribed')
parser.add_argument('--repository', default=None, type=str,
        help='Repository to look for charms in. Defaults to $JUJU_REPOSITORY or getcwd')
parser.add_argument('--quiet', default=False, action='store_true',
        help='Hide everything except maintainer subscription lists.')
parser.add_argument('--series', '-s', default=None,
        help='Which series of the charm store to run against. Defaults to current dev focus')
parser.add_argument('--maintainer', default=None,
        help='Limit output to this maintainer\'s charms only.')
parser.add_argument('--log-priority', default='WARNING')
parser.add_argument('charms', default=[], nargs='*',
        help='Charms to check for subscriptions')

args = parser.parse_args()

if args.repository is None:
    repository = os.environ.get('JUJU_REPOSITORY', os.getcwd())
else:
    repository = args.repository

if args.log_priority == 'WARNING':
    log_prio = logging.WARNING
elif args.log_priority == 'INFO':
    log_prio = logging.INFO
elif args.log_priority == 'CRITICAL':
    log_prio = logging.CRITICAL
elif args.log_priority == 'INFO':
    log_prio = logging.INFO
elif args.log_priority == 'DEBUG':
    log_prio = logging.DEBUG
else:
    log_prio = logging.DEBUG

logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=log_prio)
if args.quiet:
    logging.disable(logging.WARNING)

lp = launchpad.Launchpad.login_anonymously('unsubscribed-maintainers', 'production', version='devel', launchpadlib_dir='/home/clint/.cache/launchpadlib')

charmdistro = lp.distributions['charms']

if args.series:
    current_series = args.series
else:
    current_series = str(charmdistro.current_series).split('/').pop()

charms = []
if len(args.charms):
    for charm_name in args.charms:
        charm = charmdistro.getSourcePackage(name=charm_name)
        charms.append(charm_name)
else:
    branches = charmdistro.getBranchTips()
    for branch in branches:
        try:
            branch_series = str(branch[2][0]).split('/')[0]
            charm_name = str(branch[0]).split('/')[3]
        except IndexError:
            continue
        if branch_series != current_series:
            continue
        charms.append(charm_name)

for charm_name in charms:
    try:
        with open('%s/%s/%s/metadata.yaml' % (repository, current_series, charm_name)) as mdata:
            mdata_parsed = yaml.safe_load(mdata)
    except IOError:
        warn('%s/%s has no metadata in charm repo' % (current_series, charm_name))
        continue
    try:
        maintainers = mdata_parsed['maintainer']
    except KeyError:
        warn('%s has no maintainer' % charm_name)
        continue

    if type(maintainers) == str:
        maintainers = [maintainers]

    if args.maintainer is not None:
        if args.maintainer not in maintainers:
            maints_by_email = [ m.split('<')[1].split('>')[0] for m in maintainers ]
            if args.maintainer not in maints_by_email:
                debug('%s not in maintainer list %s' % (args.maintainer, maintainers))
                continue
    
    for maintainer in maintainers:
        maint_email = maintainer.split('<')[1].split('>')[0]
        lp_maintainer = lp.people.getByEmail(email=maint_email)
        if not lp_maintainer:
            warn('%s has no people in launchpad' % maintainer)
            continue
        pkg = charmdistro.getSourcePackage(name=charm_name)
        subscription = pkg.getSubscription(person=lp_maintainer)
        if subscription is not None:
            if args.subscribed:
                print '%s is subscribed to %s' % (maintainer, charm_name)
        elif not args.subscribed:
            if not args.subscribed:
                print '%s is not subscribed to %s' % (maintainer, charm_name)
