#!/usr/bin/python
#
#    review - adds review comment to charm bug
#
#    Copyright (C) 2011  Canonical Ltd.
#    Author: Francis J. Lacoste <francis.lacoste@canonical.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from launchpadlib.launchpad import Launchpad
from lazr.restfulclient.errors import BadRequest, NotFound

import os
import sys
import string

from optparse import OptionParser

from bzrlib import bzrdir
from bzrlib.plugins.launchpad import lp_api

import yaml

import logging

import subprocess

DISTRIBUTION = 'charms'
REVIEW_TEAM_NAME = 'charmers'
OFFICIAL_BRANCH_POCKET = 'Release'
OFFICIAL_BRANCH_STATUS = 'Mature'


def parse_options():
    parser = OptionParser(usage='usage: %prog [options] <bug_id>')

    parser.add_option(
        '-b', '--bug', dest='bug_id', default=None,
        help='The launchpad bug for the charm being reviewed.')
    #parser.add_argument("service", default=False,
    #                    help="Service to watch")

    parser.add_option(
        '-m', '--message', dest='message', default=None,
        help='The review text to add as a comment to the bug.')

    #parser.add_option(
    #    '-f', '--file', dest='message_file', default=None,
    #    help='A File containing the review text to add as a comment to the bug.')

    parser.add_option(
        '-y', '--yes', dest='skip_prompt', action='store_true', default=False,
        help='do not prompt me... just do it.')

    parser.add_option(
        '-v', '--verbose', dest='verbose', action='count', default=0,
        help='Increase verbosity level.')

    parser.add_option(
        '-t', '--lp-instance', dest='lp_instance', default='production',
        help="The Launchpad instance to use. Defaults to production, but "
        "staging' or 'qastaging' might be used for testing.")

    return parser.parse_args()


def log_level(verbose):
    if verbose >= 2:
        return logging.DEBUG
    elif verbose >= 1:
        return logging.INFO
    else:
        return logging.WARNING


#def bug_owner(bug):
#    lp_url = bzr_branch.bzr_identity #TODO this really sucks... better way?
#    return lp_url.lstrip('lp:').split('/')[0]
#
#def is_valid_owner(bug):
#    if bug is None:
#        return True
#    return bug_owner(bug) == '~charmers'
def is_valid_owner(bug):
    return True


def get_message_from_stdin():
    #stream = sys.stdin
    #text = stream.read()
    #stream.close()
    #return text
    return sys.stdin.read()


def get_message(options):
    if options.message:
        return options.message
    else:
        return get_message_from_stdin()


def main(argv):
    options, args = parse_options()
    logging.basicConfig(level=log_level(options.verbose), format='%(levelname)s:%(message)s')

    if not len(args):
        logging.error(" Usage: charm review [options] <bug_id>...  need a bug for the charm to review")
        return 1

    bug_id = args[0]
    review_message = get_message(options)

    logging.debug('login with %s launchpad:', options.lp_instance)
    lp = Launchpad.login_with('charm-pilot', options.lp_instance)

    logging.debug('find bug %s:', bug_id)
    bug = lp.bugs[bug_id]

    if bug and is_valid_owner(bug):
        logging.debug('found bug... adding comment')

        if not skip_prompt:
            #TODO prompt
            response = prompt_continue("this will add a comment to the lp bug %s.  Continue? (y/n)",
                                       bug_id)
            if response:

        bug.newMessage(content=review_message)

        #TODO check return or catch exception
    else:
        logging.error("no bug: %s", bug_id)
        return 1
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))

