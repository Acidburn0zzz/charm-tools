#!/usr/bin/env python3

import amulet
import requests
import unittest


class TestDeployment(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.deployment = amulet.Deployment()

        cls.deployment.add('$metadata.package')
        cls.deployment.expose('$metadata.package')

        try:
            cls.deployment.setup(timeout=900)
            cls.deployment.sentry.wait()
        except amulet.helpers.TimeoutError:
            amulet.raise_status(amulet.SKIP, msg="Environment wasn't stood up in time")
        except:
            raise
        cls.unit = cls.deployment.sentry.unit['$metadata.package/0']

    def test_http(self):
        # test that we can access over http
        page = requests.get('http://{}'.format(self.unit.info['public-address']))
        page.raise_for_status()


# Now you can use self.deployment.sentry.unit[UNIT] to address each of the
# units and perform more in-depth steps. There are three test statuses:
# amulet.PASS, amulet.FAIL, and amulet.SKIP - these can be triggered with
# amulet.raise_status(). Each unit has the following methods:
# - .info - An array of the information of that unit from Juju
# - .file(PATH) - Get the details of a file on that unit
# - .file_contents(PATH) - Get plain text output of PATH file from that unit
# - .directory(PATH) - Get details of directory
# - .directory_contents(PATH) - List files and folders in PATH on that unit
# - .relation(relation, service:rel) - Get relation data from return service


if __name__ == '__main__':
    unittest.main()
