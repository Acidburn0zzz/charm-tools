#!/usr/bin/env python

import sys
import os
import subprocess
import json
import tempfile

ensemble_change = os.environ.get("ENSEMBLE_CHANGE")
remote_unit = os.environ.get("ENSEMBLE_REMOTE_UNIT")

service_name, _ = remote_unit.split("/")

print ensemble_change

# TODO: maybe load this from disk for easier customization
template = """
# Generated by ensemble
# this config needs haproxy-1.1.28 or haproxy-1.2.1

global
    log 127.0.0.1   local0
    log 127.0.0.1   local1 notice
    #log loghost    local0 info
    maxconn 4096
    #chroot /usr/share/haproxy
    user haproxy
    group haproxy
    daemon
    #debug
    #quiet

defaults
    log global
    mode    http
    option  httplog
    option  dontlognull
    retries 3
    option redispatch
    maxconn 2000
    contimeout  5000
    clitimeout  50000
    srvtimeout  50000

listen %s 0.0.0.0:80
    option httpchk *
    balance roundrobin
"""

units = []
p = subprocess.Popen("relation-list", stdout=subprocess.PIPE)
for unit in p.stdout:
    units.append(unit.strip())

print units

servers = ''
for unit in units:
    p = subprocess.Popen(["relation-get", "--format", "json", unit],
                         stdout=subprocess.PIPE, close_fds=True)
    settings = json.loads(p.stdout.read().strip())
    p.wait()
    servers += ("    server %(hostname)s %(ip)s:%(port)s\n" % settings)

print servers

with tempfile.NamedTemporaryFile(dir="/etc/haproxy",prefix="haproxy.cfg", delete=False) as conf:
    conf.write((template % service_name) + servers)
    try:
        os.unlink("/etc/haproxy/haproxy.cfg.old")
    except:
        pass
    try:
        os.rename("/etc/haproxy/haproxy.cfg","/etc/haproxy/haproxy.old")
    except:
        pass
    try:
      os.rename(conf.name, "/etc/haproxy/haproxy.cfg")
    except:
        os.unlink(conf.name)

# Just in case haproxy wouldn't start because of empty/bad configs before, start it now
subprocess.call(["service", "haproxy", "start"])
subprocess.call(["service", "haproxy", "reload"])
